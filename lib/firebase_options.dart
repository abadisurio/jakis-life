// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kIsWeb;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(Environment env) {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        switch (env) {
          case Environment.development:
            return android;
          case Environment.staging:
            return android;
          case Environment.production:
            return android;
        }
      case TargetPlatform.iOS:
        switch (env) {
          case Environment.development:
            return ios;
          case Environment.staging:
            return ios;
          case Environment.production:
            return ios;
        }
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.fuchsia:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for fuchsia - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCXKi7KPoaUlfGJXMkxXxjiOkRkEjEuiSk',
    appId: '1:596541657923:android:37e952bb2f46bae52dd5f6',
    messagingSenderId: '596541657923',
    projectId: 'jakislife-dev',
    storageBucket: 'jakislife-dev.appspot.com',
  );

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCXKi7KPoaUlfGJXMkxXxjiOkRkEjEuiSk',
    appId: '1:596541657923:web:ee49db5665bb59e12dd5f6',
    messagingSenderId: '596541657923',
    projectId: 'jakislife-dev',
    authDomain: 'jakislife-dev.firebaseapp.com',
    storageBucket: 'jakislife-dev.appspot.com',
    measurementId: 'G-JEB1DMPGYK',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCeo9Lbf5Ej55YeVSRhPEgWy9uJyDlvizc',
    appId: '1:596541657923:ios:950d9402d23b2abc2dd5f6',
    messagingSenderId: '596541657923',
    projectId: 'jakislife-dev',
    storageBucket: 'jakislife-dev.appspot.com',
    androidClientId:
        '596541657923-046r1r9q2vf64l0p1p3phd0a9s0k378h.apps.googleusercontent.com',
    iosClientId:
        '596541657923-9efaa11otd230fefq84sm0l8mk39tntj.apps.googleusercontent.com',
    iosBundleId: 'com.eternalenterprise.jakislife',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyCeo9Lbf5Ej55YeVSRhPEgWy9uJyDlvizc',
    appId: '1:596541657923:ios:474651c69a8b02722dd5f6',
    messagingSenderId: '596541657923',
    projectId: 'jakislife-dev',
    storageBucket: 'jakislife-dev.appspot.com',
    androidClientId:
        '596541657923-046r1r9q2vf64l0p1p3phd0a9s0k378h.apps.googleusercontent.com',
    iosClientId:
        '596541657923-9s0ppsk9222uk0k1uf9529fa9lqa3iar.apps.googleusercontent.com',
    iosBundleId: 'com.example.myApp.RunnerTests',
  );
}

/// Environment.
enum Environment {
  /// Development.
  development,

  /// Staging.
  staging,

  /// Production.
  production,
}
